# vim: noexpandtab softtabstop=0
snippet inc
	include '${1:file}';${2}
snippet inc1
	include_once '${1:file}';${2}
snippet req
	require '${1:file}';${2}
snippet req1
	require_once '${1:file}';${2}
# Method Docblock
snippet /**
	/**
	 * ${1}
	 *
	 * @param ${2:void}
	 * @returns ${3:void}
	 * @throws ${4:none}
	 */
	${5}
# Class Variable Docblock
snippet /*v
	/**
	 * ${1}
	 *
	 * @var ${2:string}
	 */
	${3}
# Class
snippet class
	class ${1:ClassName}
	{${2}
	}
# Method
snippet meth
	${1:public} function ${2:methodName}(${3})
	{
		${4:// code...}
	}
# Interface
snippet iface
	interface ${1}
	{${2}
	}
# Interface method signature
snippet msig
	${1:public}function ${2:methodName}(${3});
# Plain old function
snippet fun
	function ${1:functionName}(${2})
	{
		${3:// code...}
	}
# Unit test method
snippet test
	public function test${1:IsWorking}()
	{${2}
	}
# Looping/Branching constructs
snippet wh
	while (${1}) {
		${2:// code...}
	}
snippet do
	do {
		${2:// code... }
	} while (${1});
snippet if
	if (${1}) {
		${2:// code...}
	}
snippet ife
	if (${1}) {
		${2:// code...}
	} else {
		${3:// code...}
	}
	${4}
snippet else
	else {
		${1:// code...}
	}
snippet elif
	elseif (${1}) {
		${2:// code...}
	}
# Tertiary conditional
snippet t
	$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
snippet switch
	switch ($${1:variable}) {
		case '${2:value}':
			${3:// code...}
			break;
		${5}
		default:
			${4:// code...}
			break;
	}
snippet case
	case '${1:value}':
		${2:// code...}
		break;${3}
snippet for
	for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4: // code...}
	}
snippet fe
	foreach ($${1:variable} as $${2:key}) {
		${3:// code...}
	}
